#!/bin/bash

# Everything else needs to be run as root
if [ $(id -u) -ne 0 ]; then
  printf "Script must be run as root. Try 'sudo aigo_config'\n"
  exit 1
fi

AIGOUSER=`echo $HOME | awk -F '/' '{print $3}'`
AUTHOR="Contributed by Cheng-Chang Ho."
#VER=`sudo dpkg -l aigo-tools | grep "aigo-tools" | awk '{print $3}'`
AIGO_VER=`cat /etc/aigo_version`
BNAME=`basename $0`
VER=0.0.94

INPUT=/tmp/aigo_config.input
OUTPUT=/tmp/aigo_config.output

[ -f $OUTPUT ] && rm -f $OUTPUT
[ -f $INPUT ] && rm -f $INPUT

CONFDIR=/etc/hostapd
CONFFILE=hostapd.conf

function change_wifi_ssid() {
	OLDSSID=`grep "^ssid=" $CONFDIR/$CONFFILE | awk -F "ssid=" '{print $2}'`
	if dialog --colors --clear --title " Change WiFi SSID " --max-input 32 --inputbox "Enter new SSID (Maximum of 32 ASCII characters):" 8 60 $OLDSSID 2>$OUTPUT; then

		NEWSSID=`cat $OUTPUT`
		TRIMNEWSSID=`echo $NEWSSID | sed 's/[[:space:]]//g'`
		if [ x"$TRIMNEWSSID" != x"" ]; then

			if dialog --colors --clear --title " Confirm " --cr-wrap --yesno "\nChange new SSID to '$TRIMNEWSSID' ?" 7 59; then

				if dialog --colors --clear --title " Reconfirm " --cr-wrap --no-collapse --yesno "\nAre you sure you want to change the SSID for '$TRIMNEWSSID' ?" 8 48; then
					sed 's/^ssid='$OLDSSID'/ssid='$TRIMNEWSSID'/' $CONFDIR/$CONFFILE > /tmp/$CONFFILE

					service hostapd stop
					sleep 1

					mv -f /tmp/$CONFFILE $CONFDIR/$CONFFILE
					chown root.root $CONFDIR/$CONFFILE
					chmod 644 $CONFDIR/$CONFFILE

					service hostapd restart

					dialog --colors --clear --title " Change WiFi SSID " --msgbox "\nChange WiFi SSID success." 7 50
				fi
			fi
		else
			dialog --colors --clear --colors --title "\Z1 Error " --msgbox "\nNew SSID is NULL" 7 50
		fi
	fi
}

function change_wifi_password() {
	OLDPWD=`grep "^wpa_passphrase=" /etc/hostapd/hostapd.conf | awk -F "wpa_passphrase=" '{print $2}'`
	if dialog --colors --clear --title " Change WiFi Password " --max-input 10 --insecure --passwordbox "Enter new password (Must be 10 ASCII characters!):" 8 60 2>$OUTPUT; then

		NEWPWD=`cat $OUTPUT`
		TRIMNEWPWD=`echo $NEWPWD | sed 's/[[:space:]]//g'`
		if [ x"$NEWPWD" == x"$TRIMNEWPWD" -a `expr length "$NEWPWD"` == 10 ]; then

			if dialog --colors --clear --title " Change WiFi Password " --max-input 10 --insecure --passwordbox "Retype new password (Must be 10 ASCII characters!):" 8 60 2>$OUTPUT; then

				REPWD=`cat $OUTPUT`
				TRIMREPWD=`echo $REPWD | sed 's/[[:space:]]//g'`
				if [ x"$REPWD" == x"$TRIMREPWD" -a `expr length "$REPWD"` == 10 ]; then

					if [ x"$NEWPWD" == x"$REPWD" ]; then

						if dialog --colors --clear --title " Confirm " --yesno "\nAre you sure you want to change the password ?" 8 65; then
							sed 's/^wpa_passphrase='$OLDPWD'/wpa_passphrase='$NEWPWD'/' $CONFDIR/$CONFFILE > /tmp/$CONFFILE

							service hostapd stop
							sleep 1

							mv -f /tmp/$CONFFILE $CONFDIR/$CONFFILE
							chown root.root $CONFDIR/$CONFFILE
							chmod 644 $CONFDIR/$CONFFILE

							service hostapd restart

							dialog --colors --clear --title " Change WiFi Password " --msgbox "\nChange password success." 7 50
						fi
					else
						dialog --colors --clear --title "\Z1 Error \Zn" --msgbox "\nSorry, passwords do not match!" 7 50
					fi
				else
					dialog --colors --clear --title "\Z1 Error \Zn" --msgbox "\nPassword length is not equal to 10!" 7 50
				fi
			fi
		else
			dialog --colors --clear --title "\Z1 Error \Zn" --msgbox "\nPassword length is not equal to 10!" 7 50
		fi
	fi
}

function change_user_password() {
	clear

	/usr/bin/passwd $AIGOUSER
	RET=$?
	echo $RET > "${OUTPUT}"

	sleep 5

	if [ $RET -eq 0 ]; then
		dialog --colors --clear --title " Change User Password " --msgbox "\nChange password success." 7 50
	else
		dialog --colors --clear --title " Change User Password " --msgbox "\n\Z1Change password fail!\Zn" 7 50
	fi

# RET=10 
# 1. (current) UNIX password: => 直接按 Enter 或輸入錯誤密碼
# 2. Enter new UNIX password: 
#    Retype new UNIX password: 
#    You must choose a longer password  => 密碼和確認密碼相同, 但是長度不足, 3 次都輸入長度不足
# 3. Enter new UNIX password: 
#    Retype new UNIX password: 
#    No password supplied  => 密碼和確認密碼都直接按 Enter, 3 次都直接按 Enter
# 4. Enter new UNIX password:
#    Retype new UNIX password: 
#    Sorry, passwords do not match => 
#    No password supplied  => 密碼和確認密碼不同
# 5. Enter new UNIX password: 
#    Retype new UNIX password: 
#    Password unchanged => 新密碼和舊密碼一樣, 3 次都一樣
# ** 最後都會出現
# passwd: Authentication token manipulation error
# passwd: password unchanged
}

function upgrade_aigo-tools() {
	clear

	sudo apt-get update
	RET=$?
	echo $RET > "${OUTPUT}"

	sleep 2

	if [ $RET -ne 0 ]; then
		dialog --colors --clear --title "  Upgrade aigo-tools " --msgbox "\n\Z1 exec 'apt-get update' fail!\Zn" 7 50
		return -1
	fi

	clear

	sudo apt install --reinstall aigo-tools -y --allow-unauthenticated
	RET=$?
	echo $RET > "${OUTPUT}"

	sleep 1

	if [ $RET -eq 0 ]; then
		dialog --colors --clear --title "  Upgrade aigo-tools " --msgbox "\n aigo-tools upgrade success.\n\n \Z4Re-execute aigo_config\Zn" 9 50
	else
		dialog --colors --clear --title "  Upgrade aigo-tools " --msgbox "\n\Z1 aigo-tools upgrade fail!\Zn" 7 50
	fi
}

function switch_libasicamera() {
	switch_libasicamera.sh
}

# Color
# \Z 正常底色,字色 0=深灰, 1=紅, 2=綠, 3=黃, 4=藍, 5=紫, 6=亮藍, 7=黑底, 白字
# \Zr\Z 灰字, 底色 0=灰, 1=紅, 2=綠, 3=黃, 4=藍, 5=紫, 6=亮藍, 7=白底, 黑字
# Bold is set by 'b', reset by 'B'. Reverse is set by 'r', reset by 'R'. Underline is set by 'u', reset by 'U'.
# Restore normal settings with "\Zn"

BackTitle="\Z7AiGO $AIGO_VER\Zn - $BNAME v$VER"

MenuTitle="\Zr\Z7 AiGO Software Configuration Tool (aigo_config) \Zn"
#MenuTitle="\Z00\Z11\Z22\Z33\Z44\Z55\Z66\Z77\Zn AiGO Software Configuration Tool (aigo_config) \Zr\Z00\Zr\Z11\Zr\Z22\Zr\Z33\Zr\Z44\Zr\Z55\Zr\Z66\Zr\Z77\Zn"

MenuText="You can use the UP/DOWN arrow keys, \n\
the number keys 1-9 to choose an option.\n\
Choose the item"

MenuHeight=20
MenuWidth=80
MenuItemHeight=10

#MenuTag="n Change WiFi IP"
#MenuItem="Default (192.168.11.254)  - Coming Soon"

#MenuTag="n Change User ID"
#MenuItem="Default (aigo)            - Coming Soon"

#MenuTag="n Change LAN IP"
#MenuItem="Default (DHCP)          - Coming Soon"

#HCC#MenuTag="n Switch 8192cu/8188eu"
#HCC#MenuItem="Default (rtl8192cu, driver=nl80211) - Coming Soon"

#MenuTag="n Switch Network Manager"
#MenuItem="Default (networking)      - Coming Soon"

MenuTag01="1 Change WiFi SSID"
MenuItem01="Default (AiGO_xxxxxx)"

MenuTag02="2 Change WiFi Password"
MenuItem02="Default (1234567890)"

MenuTag03="3 Change User Password"
MenuItem03="Default (admin123)"

MenuTag04="4 Switch libASI Version"
MenuItem04="Default (latest)"

MenuTag08="8 Upgrade"
MenuItem08="Upgrade (OS/Kernel/App)   - Now only aigo-tools"

MenuTag09="9 Expand Filesystem"
MenuItem09="Exec raspi-config"

MenuTag00="0 Exit"
MenuItem00="Exit the program."


while true
do

dialog --no-shadow --visit-items --colors --clear \
--default-item "0 Exit" \
--cancel-label "Exit" \
--backtitle "$BackTitle" \
--title "$MenuTitle" \
--menu "$MenuText" \
$MenuHeight $MenuWidth $MenuItemHeight \
"$MenuTag01" "$MenuItem01" \
"$MenuTag02" "$MenuItem02" \
"$MenuTag03" "$MenuItem03" \
"$MenuTag04" "$MenuItem04" \
"$MenuTag08" "$MenuItem08" \
"$MenuTag09" "$MenuItem09" \
"$MenuTag00" "$MenuItem00" \
2>"${INPUT}"

menuitem=$(<"${INPUT}")

case $menuitem in
	"$MenuTag01")
		change_wifi_ssid
		;;
	"$MenuTag02")
		change_wifi_password
		;;
#	"$MenuTag")
#		# Coming Soon - change_wifi_ip
#		;;
#	"$MenuTag")
#		# Coming Soon - change_user_id
#		;;
	"$MenuTag03")
		change_user_password
		;;
	"$MenuTag04")
		switch_libasicamera
		;;
#	"$MenuTag06")
#		# Coming Soon - change_lan_ip
#		;;
#	"$MenuTag07")
#		# Coming Soon - switch_wifi_device
#		# Coming Soon - switch_network_manager
#		;;
	"$MenuTag08")
		# Coming Soon - upgrade_os , upgrade_kernel , upgrade_app
		upgrade_aigo-tools
		break
		;;
	"$MenuTag09")
		# Coming Soon - expend_filesystem
		clear
		/usr/bin/raspi-config
		break
		;;
	"$MenuTag00")
		echo "Exit"
		clear
		break
		;;
	*)
		echo "Cancel"
		clear
		break
		;;
esac

done

[ -f $OUTPUT ] && rm -f $OUTPUT
[ -f $INPUT ] && rm -f $INPUT

#clear
