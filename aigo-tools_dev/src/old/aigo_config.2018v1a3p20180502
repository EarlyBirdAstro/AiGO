#!/bin/bash

# Everything else needs to be run as root
BNAME=`basename $0`
if [[ ${EUID} -ne 0 ]]; then
  printf "Script must be run as root. Try 'sudo $BNAME'\n"
  exit 1
fi

VER=`dpkg -s aigo-tools | grep Version | awk -F ': ' '{print $2}'`

AUTHOR="Contributed by Cheng-Chang Ho."

AIGOUSER=`echo $HOME | awk -F '/' '{print $3}'`
AIGO_VER=`cat /etc/aigo_version`
BNAME=`basename $0`

SSID_MAX_LEN=11
WPAPASS_MAX_LEN=10
INTERACTIVE=True
ASK_TO_REBOOT=0

AIGO_USER=aigo
AIGO_HOME=/home/$AIGO_USER
AUTOSTART_DIR=$AIGO_HOME/.config/autostart

INPUT=/tmp/aigo_config.input
OUTPUT=/tmp/aigo_config.output

[ -f $OUTPUT ] && rm -f $OUTPUT
[ -f $INPUT ] && rm -f $INPUT

# aigo_config run once on first boot
[ -f $AUTOSTART_DIR/$BNAME.desktop ] && rm -f $AUTOSTART_DIR/$BNAME.desktop

CONFDIR=/etc/hostapd
CONFFILE=hostapd.conf

change_wifi_ssid() {
	OLDSSID=`grep "^ssid=" $CONFDIR/$CONFFILE | awk -F "ssid=" '{print $2}'`
	if dialog --colors --clear --title " Change WiFi SSID " --max-input $SSID_MAX_LEN --inputbox "Enter new SSID (Maximum of $SSID_MAX_LEN ASCII characters):" 8 60 $OLDSSID 2>$OUTPUT; then

		NEWSSID=`cat $OUTPUT`
		TRIMNEWSSID=`echo $NEWSSID | sed 's/[[:space:]]//g'`
		if [ x"$TRIMNEWSSID" != x"" ]; then

			if dialog --colors --clear --title " Confirm " --cr-wrap --yesno "\nChange new SSID to '$TRIMNEWSSID' ?" 7 59; then

				if dialog --colors --clear --title " Reconfirm " --cr-wrap --no-collapse --yesno "\nAre you sure you want to change the SSID for '$TRIMNEWSSID' ?" 8 48; then
					sed 's/^ssid='$OLDSSID'/ssid='$TRIMNEWSSID'/' $CONFDIR/$CONFFILE > /tmp/$CONFFILE

					service hostapd stop
					sleep 1

					mv -f /tmp/$CONFFILE $CONFDIR/$CONFFILE
					chown root.root $CONFDIR/$CONFFILE
					chmod 644 $CONFDIR/$CONFFILE

					service hostapd restart

					dialog --colors --clear --title " Change WiFi SSID " --msgbox "\nChange WiFi SSID success." 7 50
				fi
			fi
		else
			dialog --colors --clear --colors --title "\Z1 Error " --msgbox "\nNew SSID is NULL" 7 50
		fi
	fi
}

change_wifi_password() {
	OLDPWD=`grep "^wpa_passphrase=" /etc/hostapd/hostapd.conf | awk -F "wpa_passphrase=" '{print $2}'`
	if dialog --colors --clear --title " Change WiFi Password " --max-input $WPAPASS_MAX_LEN --insecure --passwordbox "Enter new password (Must be $WPAPASS_MAX_LEN ASCII characters!):" 8 60 2>$OUTPUT; then

		NEWPWD=`cat $OUTPUT`
		TRIMNEWPWD=`echo $NEWPWD | sed 's/[[:space:]]//g'`
		if [ x"$NEWPWD" == x"$TRIMNEWPWD" -a `expr length "$NEWPWD"` == 10 ]; then

			if dialog --colors --clear --title " Change WiFi Password " --max-input 10 --insecure --passwordbox "Retype new password (Must be 10 ASCII characters!):" 8 60 2>$OUTPUT; then

				REPWD=`cat $OUTPUT`
				TRIMREPWD=`echo $REPWD | sed 's/[[:space:]]//g'`
				if [ x"$REPWD" == x"$TRIMREPWD" -a `expr length "$REPWD"` == 10 ]; then

					if [ x"$NEWPWD" == x"$REPWD" ]; then

						if dialog --colors --clear --title " Confirm " --yesno "\nAre you sure you want to change the password ?" 8 65; then
							sed 's/^wpa_passphrase='$OLDPWD'/wpa_passphrase='$NEWPWD'/' $CONFDIR/$CONFFILE > /tmp/$CONFFILE

							service hostapd stop
							sleep 1

							mv -f /tmp/$CONFFILE $CONFDIR/$CONFFILE
							chown root.root $CONFDIR/$CONFFILE
							chmod 644 $CONFDIR/$CONFFILE

							service hostapd restart

							dialog --colors --clear --title " Change WiFi Password " --msgbox "\nChange password success." 7 50
						fi
					else
						dialog --colors --clear --title "\Z1 Error \Zn" --msgbox "\nSorry, passwords do not match!" 7 50
					fi
				else
					dialog --colors --clear --title "\Z1 Error \Zn" --msgbox "\nPassword length is not equal to 10!" 7 50
				fi
			fi
		else
			dialog --colors --clear --title "\Z1 Error \Zn" --msgbox "\nPassword length is not equal to 10!" 7 50
		fi
	fi
}

change_user_password() {
	clear

	/usr/bin/passwd $AIGOUSER
	RET=$?
	echo $RET > "${OUTPUT}"

	sleep 5

	if [ $RET -eq 0 ]; then
		dialog --colors --clear --title " Change User Password " --msgbox "\nChange password success." 7 50
	else
		dialog --colors --clear --title " Change User Password " --msgbox "\n\Z1Change password fail!\Zn" 7 50
	fi

# RET=10 
# 1. (current) UNIX password: => 直接按 Enter 或輸入錯誤密碼
# 2. Enter new UNIX password: 
#    Retype new UNIX password: 
#    You must choose a longer password  => 密碼和確認密碼相同, 但是長度不足, 3 次都輸入長度不足
# 3. Enter new UNIX password: 
#    Retype new UNIX password: 
#    No password supplied  => 密碼和確認密碼都直接按 Enter, 3 次都直接按 Enter
# 4. Enter new UNIX password:
#    Retype new UNIX password: 
#    Sorry, passwords do not match => 
#    No password supplied  => 密碼和確認密碼不同
# 5. Enter new UNIX password: 
#    Retype new UNIX password: 
#    Password unchanged => 新密碼和舊密碼一樣, 3 次都一樣
# ** 最後都會出現
# passwd: Authentication token manipulation error
# passwd: password unchanged
}

upgrade_os-kernel() {
	clear
#	ASK_TO_REBOOT=1

	# TODO: exec aigo_upgrade.sh
	# return = 0 then Re-execute aigo_config
	# return = 1 then Reboot
	# return = other then Fail
	# lxterminal exec aigo_update.sh
#	lxterminal -e /usr/local/bin/aigo_upgrade.sh
	/usr/local/bin/aigo_upgrade.sh
}

upgrade_aigo-tools() {
	clear

	sudo apt-get update
	RET=$?
	echo $RET > "${OUTPUT}"

	sleep 2

	if [ $RET -ne 0 ]; then
		dialog --colors --clear --title "  Upgrade aigo-tools " --msgbox "\n\Z1 exec 'apt-get update' fail!\Zn" 7 50
		return -1
	fi

	clear

	sudo apt install --reinstall aigo-tools -y --allow-unauthenticated
	RET=$?
	echo $RET > "${OUTPUT}"

	sleep 1

	if [ $RET -eq 0 ]; then
		dialog --colors --clear --title "  Upgrade aigo-tools " --msgbox "\n aigo-tools upgrade success.\n\n \Z4Re-execute aigo_config\Zn" 9 50
	else
		dialog --colors --clear --title "  Upgrade aigo-tools " --msgbox "\n\Z1 aigo-tools upgrade fail!\Zn" 7 50
	fi
}

#switch_libasicamera() {
#	switch_libasicamera.sh
#}

# This code from raspi-config
do_expand_rootfs() {
	ROOT_PART=$(mount | sed -n 's|^/dev/\(.*\) on / .*|\1|p')
	PART_NUM=${ROOT_PART#mmcblk0p}
	if [ "$PART_NUM" = "$ROOT_PART" ]; then
		dialog --msgbox "$ROOT_PART is not an SD card. Don't know how to expand" 20 60
		return 0
	fi

	# NOTE: the NOOBS partition layout confuses parted. For now, let's only
	# agree to work with a sufficiently simple partition layout
	if [ "$PART_NUM" -ne 2 ]; then
		dialog --msgbox "Your partition layout is not currently supported by this tool. You are probably using NOOBS, in which case your root filesystem is already expanded anyway." 20 60
		return 0
	fi

	LAST_PART_NUM=$(parted /dev/mmcblk0 -ms unit s p | tail -n 1 | cut -f 1 -d:)
	if [ $LAST_PART_NUM -ne $PART_NUM ]; then
		dialog --msgbox "$ROOT_PART is not the last partition. Don't know how to expand" 20 60
		return 0
	fi

	# Get the starting offset of the root partition
	PART_START=$(parted /dev/mmcblk0 -ms unit s p | grep "^${PART_NUM}" | cut -f 2 -d: | sed 's/[^0-9]//g')
	[ "$PART_START" ] || return 1
	# Return value will likely be error for fdisk as it fails to reload the
	# partition table because the root fs is mounted
	fdisk /dev/mmcblk0 <<EOF
p
d
$PART_NUM
n
p
$PART_NUM
$PART_START

p
w
EOF
#	ASK_TO_REBOOT=1

	# now set up an init.d script
	cat <<EOF > /etc/init.d/resize2fs_once &&
#!/bin/sh
### BEGIN INIT INFO
# Provides:          resize2fs_once
# Required-Start:
# Required-Stop:
# Default-Start: 3
# Default-Stop:
# Short-Description: Resize the root filesystem to fill partition
# Description:
### END INIT INFO

. /lib/lsb/init-functions

case "\$1" in
	start)
		log_daemon_msg "Starting resize2fs_once" &&
		resize2fs /dev/$ROOT_PART &&
		touch /.resized &&
		update-rc.d resize2fs_once remove &&
		rm /etc/init.d/resize2fs_once &&
		log_end_msg \$?
		;;
	*)
		echo "Usage: \$0 start" >&2
		exit 3
	;;
esac
EOF
	chmod +x /etc/init.d/resize2fs_once &&
	update-rc.d resize2fs_once defaults &&
	if [ "$INTERACTIVE" = True ]; then
		dialog --msgbox "Root partition has been resized.\nThe filesystem will be enlarged upon the next reboot" 20 60
	fi
}

do_reboot() {
	if [ $ASK_TO_REBOOT -eq 1 ]; then
		dialog --yesno "Would you like to reboot now?" 20 60
		if [ $? -eq 0 ]; then # yes
			sync
			reboot
		fi
	else
		dialog --msgbox "A reboot is needed" 20 60
		sync
		reboot
	fi

	return 0
}

do_raspi-config() {
	sudo raspi-config
}

#=== Main ===#
# Color
# \Z 正常底色,字色 0=深灰, 1=紅, 2=綠, 3=黃, 4=藍, 5=紫, 6=亮藍, 7=黑底, 白字
# \Zr\Z 灰字, 底色 0=灰, 1=紅, 2=綠, 3=黃, 4=藍, 5=紫, 6=亮藍, 7=白底, 黑字
# Bold is set by 'b', reset by 'B'. Reverse is set by 'r', reset by 'R'. Underline is set by 'u', reset by 'U'.
# Restore normal settings with "\Zn"

BackTitle="\Z7AiGO $AIGO_VER\Zn - $BNAME v$VER"

MenuTitle="\Zr\Z7 AiGO Software Configuration Tool (aigo_config) \Zn"
#MenuTitle="\Z00\Z11\Z22\Z33\Z44\Z55\Z66\Z77\Zn AiGO Software Configuration Tool (aigo_config) \Zr\Z00\Zr\Z11\Zr\Z22\Zr\Z33\Zr\Z44\Zr\Z55\Zr\Z66\Zr\Z77\Zn"

MenuText="You can use the UP/DOWN arrow keys, \n\
the number keys 0-9 to choose an option.\n\
Choose the item"

MenuHeight=20
#MenuWidth=80
MenuWidth=100
MenuItemHeight=10

#MenuTag="n Change User ID"
#MenuItem="Default (aigo)            - Coming Soon"

#HCC#MenuTag="n Switch 8192cu/8188eu"
#HCC#MenuItem="Default (rtl8192cu, driver=nl80211) - Coming Soon"

#MenuTag="n Switch Network Manager"
#MenuItem="Default (networking)      - Coming Soon"

CURRENT_SSID=""
MenuTag01="1 Change WiFi SSID"
MenuItem01="\Zr\Z7$CURRENT_SSID\Zn"

CURRENT_WPAPASS=""
MenuTag02="2 Change WiFi Password"
MenuItem02="\Zr\Z7$CURRENT_WPAPASS\Zn"

CURRENT_WANIP="xxx.xxx.xxx.xxx"
MenuTag03="3 Change WiFi IP"
MenuItem03="\Zr\Z7$CURRENT_WANIP\Zn - Coming Soon"

CURRENT_LANIP="xxx.xxx.xxx.xxx"
MenuTag04="4 Change LAN IP"
MenuItem04="\Zr\Z7$CURRENT_LANIP\Zn - Coming Soon"

MenuTag05="5 Change User Password"
MenuItem05="\Zr\Z7admin123\Zn (select 5 & click <OK> to reset)"

#CURRENT_LIBASI_VER="none"
#MenuTag06="6 Switch libASI Version"
#MenuItem06="\Zr\Z7$CURRENT_LIBASI_VER\Zn"

MenuTag06="6 Get Astrometry fits"
MenuItem06="Getting index files for Astrometry.net - Coming Soon"

MenuTag07="7"
#MenuTag07="7 OS & Kernel Upgrade"
#MenuItem07="\Z1(Unstable!)\Zn Upgrade from 2017.v1 to Today"

#MenuTag08="8 Expand Filesystem"
#MenuItem08="Ensures that all of the SD card storage is available to the OS"
MenuTag08="8 raspi-config"
MenuItem08="Raspberry Pi Software Configuration Tool"

MenuTag09="9 AiGO Upgrade"
MenuItem09="AiGO Tools Upgrade"

MenuTag00="0 Exit"
MenuItem00="Exit the program."


while true
do

CURRENT_SSID=`grep "^ssid=" /etc/hostapd/hostapd.conf | awk -F '=' '{print $2}'`
MenuItem01="\Zr\Z7$CURRENT_SSID\Zn (Select 1 & click <OK> to reset)"

CURRENT_WPAPASS=`grep "^wpa_passphrase=" /etc/hostapd/hostapd.conf | awk -F '=' '{print $2}' | cut -c 1-3`
MenuItem02="\Zr\Z7$CURRENT_WPAPASS**\Zn (Select 2 & click <OK> to reset)"

CURRENT_WANIP=`ifconfig wlan0 | grep "inet addr" | awk '{print $2}' | awk -F ':' '{print $2}'`
MenuItem03="\Zr\Z7$CURRENT_WANIP\Zn - Coming Soon"

CURRENT_LANIP=`ifconfig eth0 | grep "inet addr" | awk '{print $2}' | awk -F ':' '{print $2}'`
MenuItem04="\Zr\Z7$CURRENT_LANIP\Zn - Coming Soon"

#file -E /usr/lib/libASICamera.so
#RET=$?
#if [ $RET -eq 0 ] ; then
#	CURRENT_LIBASI_VER=`file -E /usr/lib/libASICamera.so | awk -F "libASICamera.so." '{print $3}'`
#else
#	CURRENT_LIBASI_VER="none"
#fi
#MenuItem06="\Zr\Z7$CURRENT_LIBASI_VER\Zn"

dialog --no-shadow --visit-items --colors --clear \
--default-item "0 Exit" \
--cancel-label "Exit" \
--backtitle "$BackTitle" \
--title "$MenuTitle" \
--menu "$MenuText" \
$MenuHeight $MenuWidth $MenuItemHeight \
"$MenuTag01" "$MenuItem01" \
"$MenuTag02" "$MenuItem02" \
"$MenuTag03" "$MenuItem03" \
"$MenuTag04" "$MenuItem04" \
"$MenuTag05" "$MenuItem05" \
"$MenuTag06" "$MenuItem06" \
"$MenuTag07" "$MenuItem07" \
"$MenuTag08" "$MenuItem08" \
"$MenuTag09" "$MenuItem09" \
"$MenuTag00" "$MenuItem00" \
2>"${INPUT}"

menuitem=$(<"${INPUT}")

case $menuitem in
	"$MenuTag01")
		change_wifi_ssid
		;;
	"$MenuTag02")
		change_wifi_password
		;;
	"$MenuTag03")
		# TODO: change_wifi_ip
		;;
	"$MenuTag04")
		# TODO: change_lan_ip
		;;
	"$MenuTag05")
		change_user_password
		;;
	"$MenuTag06")
#		switch_libasicamera
		# TODO: get_astrometry.net_index-files
		;;
	"$MenuTag07")
#		upgrade_os-kernel
#		ASK_TO_REBOOT=0
#		do_reboot
#		clear
#		echo "Please reboot"
		;;
	"$MenuTag08")
		do_raspi-config
#		INTERACTIVE=False
#		do_expand_rootfs
#		ASK_TO_REBOOT=1
#		do_reboot
		clear
#		echo "Please reboot"
		;;
	"$MenuTag09")
		# TODO: upgrade_os , upgrade_kernel , upgrade_app
		upgrade_aigo-tools
		clear
		echo "Re-execute aigo_config"
		break
		;;
	"$MenuTag00")
		clear
		echo "Exit"
		break
		;;
	*)
		clear
		echo "Exit"
		break
		;;
#	"$MenuTag")
#		# Coming Soon - change_user_id
#		;;
#	"$MenuTag07")
#		# Coming Soon - switch_wifi_device
#		# Coming Soon - switch_network_manager
#		;;
esac

done

[ -f $OUTPUT ] && rm -f $OUTPUT
[ -f $INPUT ] && rm -f $INPUT

#clear
